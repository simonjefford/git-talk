Git - beyond the Github client

* Agenda

- Internals
- Sharing Code
- Rebasing
- Other Cool Stuff

* Internals

* Objects

- Git = A content-addressable file-system
- Ask Git to store something and it gives you a key
- Key = SHA1 hash of the content (plus a header)
- You can use the key to get that content back
- Blobs, trees & commits

* Blobs

- Just content
- No names
- DEMO

* Trees

- Gives names to blobs
- Also to other trees
- End result = snapshot of the contents of a folder, recursively

  100644 blob 942ed2428fb28cc7fa8bd4c0298043548bcfab41 test.txt
  040000 tree 29a422c19251aeaeb907175e9b3219a9bed6c616 folder

- DEMO

* Commits

- Provide information as to who saved the snapshot
- And why
- And when

  tree 79b50ad095937a0df94cabf17258079674f2d3b5
  parent 0b54354cb3edd0c635071afa868690a50454f743
  author Simon Jefford <simon.jefford@gmail.com> 1405416478 +0100
  committer Simon Jefford <simon.jefford@gmail.com> 1405416478 +0100

  added a folder

- Most commits have one parent
- Some have more
- DEMO

* So What?

.image miles-davis.jpg

* So What?

.image objects.jpg

* The Big Deal

- Objects are immutable
- If Git gives you a working folder from a particular commit, it's definitely what was put in
- The same is true for every commit in the history
- If you have the objects, even if nothing points to them, you can get back to that point in time

* Branches

- Not objects
- Just pointers to commits

* Sharing Code

* Sharing Code

- Getting a repository => Cloning (git clone).
- Updating a local repository from a remote one = fetching
  git fetch

- Updating a local repository AND updating local tracking branches = pulling
  git pull

- Updating a remote repository = pushing
  git push

- The "sync" button in the Github client is actually quite dangerous.
- It forces a push and a pull.
- You may not be ready to push yet.

* Rebasing

AKA Rewriting history

Two main use cases

- "Straightening out" history
  git rebase master

- Changing the order of commits, squashing commits or getting rid of commits.
  git rebase -i master~10

* Rebasing

BEWARE

Only rebase commits that have not been shared yet

(Unless it's a pull request)
